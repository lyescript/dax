(define create (globals)
  (define _G ((get Object 'assign) (obj) (or globals (obj))))
  (set (get _G '_G) _G)
  (set (get _G 'environment) (list (obj)))
  (when-compiling
    (let expand-file (_G .expand-file)
      `(do
         ,@(expand-file "runtime.l")
         ,@(expand-file "macros.l")
         (set (get _G 'compiler)
              (with exports (obj)
                (let (self exports module (obj exports: exports))
                  ,@(expand-file "compiler.l")))
              (get _G 'reader)
              (with exports (obj)
                (let (self exports module (obj exports: exports))
                  ,@(expand-file "reader.l")))
              (get _G 'system)
              (with exports (obj)
                (let (self exports module (obj exports: exports))
                  ,@(expand-file "system.l")))
              (get _G 'main)
              (with exports (obj)
                (let (self exports module (obj exports: exports))
                  ,@(expand-file "main.l"))))
         ((get Object 'assign) _G (get _G 'main))
         )))
  _G)

(set (get (get |module| 'exports) 'create) create)


